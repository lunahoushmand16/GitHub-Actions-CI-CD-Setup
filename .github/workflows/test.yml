name: Run Cypress Tests

on:
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      # Step 1: Checkout the pull request code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup the current Node.js version in the matrix
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Install root dependencies (includes server + client)
      - name: Install dependencies
        run: npm install

      # Step 4: Build the client before server tries to serve dist/
      - name: Build client
        run: cd client && npm install && npm run build

      # Step 5: Seed database
      - name: Seed MongoDB
        run: npm run seed
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      # Step 6: Start server in background and wait
      - name: Start the server in background
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          npm run develop &
          npx wait-on http://localhost:3001

      # Step 7: Run Cypress tests
      - name: Run Cypress tests
        run: npx cypress run

      # ✅ Step 8: Upload mochawesome report (fix duplicate name conflict)
      - name: Upload mochawesome report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mochawesome-report-node-${{ matrix.node-version }}
          path: cypress/reports
      
      # ✅ Step 9: Create GitHub Summary (optional but visual)
      - name: Write Cypress results to GitHub summary
        if: always()
        run: |
# Merge mochawesome JSON reports
          npx mochawesome-merge cypress/reports/*.json > merged-report.json 

# Extract values using jq
          PASSES=$(jq '.stats.passes' merged-report.json)
          FAILS=$(jq '.stats.failures' merged-report.json)
          DURATION=$(jq '.stats.duration' merged-report.json)

# Write dynamic summary
          echo "### ✅ Cypress Results (Node.js ${{ matrix.node-version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Result | Passed ✅ | Failed ❌ | Duration ⏱️ |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-----------|------------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "|        | $PASSES   | $FAILS     | ${DURATION}ms  |" >> $GITHUB_STEP_SUMMARY
